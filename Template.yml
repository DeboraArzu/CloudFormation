AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template OpsWorks: Launches OpsWorks stack, layer, instance and creates all the necessary resources 
for a public subnet'
Mappings:
  Region2Principal:
    us-east-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
Resources:
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: OpsWorks_IG
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      Tags:
        - 
           Key: Name
           Name: OpsWorksVPC
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: MyVpc
      Tags:
      - Key: Name
        Value: OpsWorks_publicRT
  #Make public Route Table
  MyrouteT1:
     Type: AWS::EC2::Route
     Properties:
      RouteTableId: 
        Ref: MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GateWayId: 
        Ref: MyInternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: 
        Ref: MyVpc
      InternetGatewayId: 
        Ref: MyInternetGateway
  #Security Groups
  OpsWorksSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and ssh to client host
      VpcId: 
        Ref: MyVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: OpsWorksSG  
  #NACL
  MyNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: MyVpc
      Tags:
      - Key: Name
        Value: MyNACL
  MyNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: MyNetworkACL
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
      PortRange:
        From: '22'
        To: '22'
  # Public Subnet
  OpsWorksPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: MyVpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-2a
      Tags:
        - Key: Name
          Value: OpsWorksPublicSubnet
  MySubnetRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId:
        Ref: OpsWorksPublicSubnet
      RouteTableId:
        Ref: MyRouteTable
  # OpsWorks    
  MyStack:
    Type: "AWS::OpsWorks::Stack"
    Properties: 
      AgentVersion: Auto-update
      ChefConfiguration:
        #BerkshelfVersion:
        ManageBerkshelf: 'true'
      ConfigurationManager:
        Name: Chef
        Version: 12
      CustomCookbooksSource:
        Type: git
        Url: https://github.com/DeboraArzu/Chef_Redis
        Username: Deboraarzu
      DefaultAvailabilityZone: us-east-1
      DefaultInstanceProfileArn:
        Fn::GetAtt:
        - OpsWorksInstanceProfile
        - Arn
      DefaultOs: Ubuntu 16.04 LTS
      #DefaultSshKeyName: String
      DefaultSubnetId:
        Ref: OpsWorksPublicSubnet
      Name: Chef_Redis
      ServiceRoleArn:
        Fn::GetAtt:
        - OpsWorksServiceRole
        - Arn
      Tags: 
      - Key: "Name"
        Value: "Chef_Redis" 
      UseCustomCookbooks: 'true'
      UseOpsworksSecurityGroups: 'true'
      VpcId:
        Ref: MyVpc
  MyApp:
    Type: AWS::OpsWorks::App
    Properties:
      StackId:
        Ref: MyStack
      Name: RedisApp
      Type: other
      AppSource:
        Type: git
        Url: git://github.com/DeboraArzu/Chef_Redis.git
  MyLayer:
    Type: AWS::OpsWorks::Layer
    DependsOn: MyApp
    Properties:
      StackId:
        Ref: MyStack
      Name: Redis_Opsworks
      Type: custom
      Shortname: redis-app
      EnableAutoHealing: 'true'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'true'
  MyInstance:
    Type: AWS::OpsWorks::Instance
    Properties:
      StackId:
        Ref: MyStack
      LayerIds:
      - Ref: MyLayer
      InstanceType: t2.micro
  # IAM Roles
  OpsWorksServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - Fn::FindInMap:
              - Region2Principal
              - Ref: AWS::Region
              - OpsWorksPrincipal
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: opsworks-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            - iam:PassRole
            - cloudwatch:GetMetricStatistics
            - elasticloadbalancing:*
            Resource: "*"
  OpsWorksInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - Fn::FindInMap:
              - Region2Principal
              - Ref: AWS::Region
              - EC2Principal
          Action:
          - sts:AssumeRole
      Path: "/"
  # Instance Profile
  OpsWorksInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: OpsWorksInstanceRole
# Outputs
Outputs:
  StackId:
    Description: Stack Id for the newly created OpsWorks stack
    Value:
      Ref: MyStack

    
      